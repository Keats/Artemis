// Generated by CoffeeScript 1.3.3
(function() {

  describe("Tag Manager", function() {
    var entity, world;
    world = null;
    entity = null;
    before(function() {
      world = new Bragi.EntityWorld();
      return entity = world.createEntity();
    });
    describe("Registering a tag", function() {
      before(function() {
        return world.tagManager.register("testing", entity);
      });
      return it("should have added a tag/entity mapping in taggedEntities", function() {
        return world.tagManager.taggedEntities["testing"].should.be.equal(entity);
      });
    });
    describe("Unregistering a tag", function() {
      before(function() {
        world.tagManager.register("testing", entity);
        return world.tagManager.unregister("testing");
      });
      return it("should not have a tag/entity mapping in taggedEntities", function() {
        return Object.keys(world.tagManager.taggedEntities).should.have.length(0);
      });
    });
    describe("Finding an entity via a tag", function() {
      var entity_found;
      entity_found = null;
      before(function() {
        world.tagManager.register("testing", entity);
        return entity_found = world.tagManager.get("testing");
      });
      return it("the entity found should be equal to the one registered", function() {
        return entity_found.should.be.equal(entity);
      });
    });
    return describe("Finding out if an entity has a tag", function() {
      var result_bad, result_ok;
      result_ok = null;
      result_bad = null;
      before(function() {
        world.tagManager.register("testing", entity);
        result_ok = world.tagManager.isRegistered("testing");
        return result_bad = world.tagManager.isRegistered("wrong");
      });
      it("should return true if a tag is registered", function() {
        return result_ok.should.be["true"];
      });
      return it("should return false if a tag is not registered", function() {
        return result_bad.should.not.be["true"];
      });
    });
  });

}).call(this);

// Generated by CoffeeScript 1.3.3
(function() {
  var EntityManager;

  Bragi.EntityManager = {};

  EntityManager = (function() {

    function EntityManager(world) {
      this.world = world;
      this.entities = {};
      this.componentsByType = {};
      this.nextId = 0;
    }

    EntityManager.prototype._create = function() {
      var entity;
      entity = new Bragi.Entity(this.world, this.nextId);
      this.nextId++;
      this.entities[entity.id] = entity;
      return entity;
    };

    EntityManager.prototype._getEntity = function(id) {
      return this.entities[id];
    };

    EntityManager.prototype.remove = function(entity) {
      return delete this.entities[entity.id];
    };

    EntityManager.prototype._addComponent = function(entity, component) {
      var componentType, components;
      componentType = Bragi.ComponentTypeManager.getType(component);
      components = this.componentsByType[componentType.id];
      if (!components) {
        components = {};
        this.componentsByType[componentType.id] = components;
      }
      components[entity.id] = component;
      return entity._addBit(componentType.bit);
    };

    EntityManager.prototype._removeComponent = function(entity, componentName) {
      var componentType, components;
      componentType = Bragi.ComponentTypeManager.getTypeByName(componentName);
      components = this.componentsByType[componentType.id];
      delete components[entity.id];
      return entity._removeBit(componentType.bit);
    };

    EntityManager.prototype._getComponent = function(entity, componentName) {};

    EntityManager.prototype.removeAllComponents = function(entity) {};

    EntityManager.prototype.isActive = function(id) {};

    return EntityManager;

  })();

  Bragi.EntityManager = EntityManager;

}).call(this);

// Generated by CoffeeScript 1.3.3
(function() {
  var EntityManager;

  Bragi.EntityManager = {};

  EntityManager = (function() {

    function EntityManager(world) {
      this.world = world;
      this.entities = {};
      this.componentsByType = {};
      this.nextId = 0;
    }

    EntityManager.prototype._create = function() {
      var entity;
      entity = new Bragi.Entity(this.world, this.nextId);
      this.nextId++;
      this.entities[entity.id] = entity;
      return entity;
    };

    EntityManager.prototype._getEntity = function(id) {
      return this.entities[id];
    };

    EntityManager.prototype.remove = function(entity) {
      delete this.entities[entity.id];
      this._removeAllComponents(entity);
      return entity = null;
    };

    EntityManager.prototype._isActive = function(id) {
      if (this.entities[id]) {
        return true;
      } else {
        return false;
      }
    };

    EntityManager.prototype._addComponent = function(entity, component) {
      var componentType, components;
      componentType = Bragi.ComponentTypeManager.getType(component);
      components = this.componentsByType[componentType.id];
      if (!components) {
        components = {};
        this.componentsByType[componentType.id] = components;
      }
      components[entity.id] = component;
      return entity._addTypeBit(componentType.bit);
    };

    EntityManager.prototype._removeComponent = function(entity, componentName) {
      var componentType, components;
      componentType = Bragi.ComponentTypeManager.getTypeByName(componentName);
      components = this.componentsByType[componentType.id];
      delete components[entity.id];
      return entity._removeTypeBit(componentType.bit);
    };

    EntityManager.prototype._getComponent = function(entity, componentName) {
      var componentType, components;
      componentType = Bragi.ComponentTypeManager.getTypeByName(componentName);
      components = this.componentsByType[componentType.id];
      if (components) {
        return components[entity.id];
      } else {
        return null;
      }
    };

    EntityManager.prototype._removeAllComponents = function(entity) {
      var componentTypes, index, _ref, _results;
      _ref = this.componentsByType;
      _results = [];
      for (index in _ref) {
        componentTypes = _ref[index];
        if (entity.id in componentTypes) {
          delete componentTypes[entity.id];
          if (Object.keys(componentTypes).length === 0) {
            _results.push(delete this.componentsByType[index]);
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return EntityManager;

  })();

  Bragi.EntityManager = EntityManager;

}).call(this);

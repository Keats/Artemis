// Generated by CoffeeScript 1.3.3
(function() {
  var System,
    __slice = [].slice;

  Bragi.System = {};

  System = (function() {

    function System() {
      var component, components, type, _i, _len;
      components = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.world = null;
      this.actives = {};
      this.enabled = true;
      this.bit = 0;
      this.typeFlags = 0;
      for (_i = 0, _len = components.length; _i < _len; _i++) {
        component = components[_i];
        type = Bragi.ComponentTypeManager.getTypeByName(component);
        this.typeFlags |= type.bit;
      }
    }

    System.prototype.initialize = function() {};

    System.prototype.processEntities = function(entities) {};

    System.prototype.begin = function() {};

    System.prototype.end = function() {};

    System.prototype.process = function() {
      if (this.enabled) {
        this.begin;
        this.processEntities(this.actives);
        return this.end;
      }
    };

    System.prototype.change = function(entity) {
      var contains, interest;
      contains = (this.bit & entity.systemBits) === this.systemBit;
      interest = (this.typeFlags & entity.typeBits) === this.typeFlags;
      if (interest && !contains && this.typeFlags > 0) {
        this.actives[entity.id] = entity;
        entity._addSystemBit(this.bit);
        return this.added(entity);
      } else if (!interest && contains && this.typeFlags > 0) {
        return this.remove(entity);
      }
    };

    System.prototype.remove = function(entity) {
      delete this.actives[entity.id];
      entity._removeSystemBit(this.bit);
      return this.removed(entity);
    };

    System.prototype.added = function(entity) {};

    System.prototype.removed = function(entity) {};

    return System;

  })();

  Bragi.System = System;

}).call(this);
